name: 1. CI - Test & Security

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # ======================================================
  # BACKEND TESTS (Spring Boot + Maven)
  # ======================================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build & Run Tests
        run: mvn -B clean verify

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: backend/target/surefire-reports/

  # ======================================================
  # FRONTEND TESTS (React + Vitest)
  # ======================================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Run Frontend Tests (Vitest)
        run: npm test

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  # ======================================================
  # SECURITY SCAN (Trivy)
  # ======================================================
  security-scan:
    name: Security Scanning (Trivy)
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Install Trivy CLI on the runner
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@0.2.3
        with:
          trivy-version: "latest"

      # 2️⃣ Download the HTML template for report generation
      - name: Download Trivy HTML template
        run: |
          mkdir -p contrib
          curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o contrib/html.tpl

      # 3️⃣ Run Trivy scan for Backend
      - name: Run Trivy vulnerability scanner (Backend)
        run: |
          trivy fs ./backend \
            --format template \
            --template "@contrib/html.tpl" \
            -o trivy-backend-report.html \
            --exit-code 0 \
            --ignore-unfixed \
            --severity CRITICAL,HIGH

      # 4️⃣ Run Trivy scan for Frontend
      - name: Run Trivy vulnerability scanner (Frontend)
        run: |
          trivy fs ./frontend \
            --format template \
            --template "@contrib/html.tpl" \
            -o trivy-frontend-report.html \
            --exit-code 0 \
            --ignore-unfixed \
            --severity CRITICAL,HIGH

      # 5️⃣ Upload the HTML reports as artifacts
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-backend-report.html
            trivy-frontend-report.html

      # 6️⃣ Print confirmation
      - name: Notify Success
        if: success()
        run: echo "✅ Security scan completed successfully."

