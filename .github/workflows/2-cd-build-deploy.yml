name: 2. Build, Push & Deploy to Azure

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  # üîß Azure Configuration
  AZURE_RESOURCE_GROUP: "burgerbuilder-rg"
  ACR_NAME: "burgerbuilderacr"
  ACR_LOGIN_SERVER: "burgerbuilderacr.azurecr.io"
  FRONTEND_APP: "burgerbuilder-frontend"
  BACKEND_APP: "burgerbuilder-backend"
  IMAGE_TAG: "prod-${{ github.run_number }}"

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
      # -----------------------------
      # Checkout Repository
      # -----------------------------
      - name: üìÇ Checkout Code
        uses: actions/checkout@v4

      # -----------------------------
      # Azure Login (Service Principal)
      # -----------------------------
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # -----------------------------
      # Azure CLI Setup
      # -----------------------------
      - name: ‚öôÔ∏è Install Azure CLI extensions
        run: |
          az extension add --name containerapp --yes || az extension update --name containerapp
          az extension add --name acr --yes || az extension update --name acr

      # -----------------------------
      # ACR Login
      # -----------------------------
      - name: üîë Log in to ACR
        run: az acr login --name $ACR_NAME

      # -----------------------------
      # Build & Push Backend Image
      # -----------------------------
      - name: üèóÔ∏è Build & Push Backend
        run: |
          docker build -t $ACR_LOGIN_SERVER/burgerbuilder-backend:$IMAGE_TAG ./backend
          docker push $ACR_LOGIN_SERVER/burgerbuilder-backend:$IMAGE_TAG

      # -----------------------------
      # Build & Push Frontend Image
      # -----------------------------
      - name: üèóÔ∏è Build & Push Frontend
        run: |
          docker build -t $ACR_LOGIN_SERVER/burgerbuilder-frontend:$IMAGE_TAG ./frontend
          docker push $ACR_LOGIN_SERVER/burgerbuilder-frontend:$IMAGE_TAG

      # -----------------------------
      # Deploy Backend to Container App
      # -----------------------------
      - name: üöÄ Deploy Backend
        run: |
          az containerapp update \
            --name $BACKEND_APP \
            --resource-group $AZURE_RESOURCE_GROUP \
            --image $ACR_LOGIN_SERVER/burgerbuilder-backend:$IMAGE_TAG \
            --output table

      # -----------------------------
      # Deploy Frontend to Container App
      # -----------------------------
      - name: üöÄ Deploy Frontend
        run: |
          az containerapp update \
            --name $FRONTEND_APP \
            --resource-group $AZURE_RESOURCE_GROUP \
            --image $ACR_LOGIN_SERVER/burgerbuilder-frontend:$IMAGE_TAG \
            --output table

      # -----------------------------
      # Health Checks
      # -----------------------------
      - name: ü©∫ Backend Health Check
        run: |
          BACKEND_URL=$(az containerapp show -n $BACKEND_APP -g $AZURE_RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
          echo "Checking backend health at https://$BACKEND_URL/actuator/health"
          for i in {1..30}; do
            if curl -skf "https://$BACKEND_URL/actuator/health" > /dev/null; then
              echo "‚úÖ Backend is healthy!"
              exit 0
            fi
            echo "Attempt $i failed. Retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Backend failed health check."
          exit 1

      - name: ü©∫ Frontend Health Check
        run: |
          FRONTEND_URL=$(az containerapp show -n $FRONTEND_APP -g $AZURE_RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
          echo "Checking frontend at https://$FRONTEND_URL"
          for i in {1..30}; do
            if curl -skf "https://$FRONTEND_URL" > /dev/null; then
              echo "‚úÖ Frontend is healthy!"
              exit 0
            fi
            echo "Attempt $i failed. Retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Frontend failed health check."
          exit 1
